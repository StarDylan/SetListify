import os
from sqlalchemy import create_engine, text
import json

engine = create_engine("postgresql://postgres:example@localhost:61321", pool_pre_ping=True)

data_path = "./data"

avid_user_percent = 0.1
avid_user_range = [10,100]

casual_user_range = [1,10]


# list all files in data_path
files = os.listdir(data_path)

songs = {}
song_cnt = 0
playlist_cnt = 0
file_cnt = 0

max_songs = 600000

with engine.begin() as conn:
    # drop all tables
    conn.execute(text("""DROP TABLE IF EXISTS users_playlist_position, song_history, ad_campaigns, playlist_songs, links, playlists, users, songs, platforms;"""))

    # Create all dbs
    conn.execute(text("""
                      create table
                        public.platforms (
                            id bigint generated by default as identity,
                            platform_name text not null,
                            platform_url text not null,
                            constraint platforms_pkey primary key (id)
                        ) tablespace pg_default;

                        create table
                        public.songs (
                            id bigint generated by default as identity,
                            created_at timestamp with time zone not null default now(),
                            song_name text not null,
                            artist text not null,
                            album text not null,
                            authorization_key text not null default substr(md5((random())::text), 0, 25),
                            constraint songs_pkey primary key (id)
                        ) tablespace pg_default;

                        create table
                        public.playlists (
                            id bigint generated by default as identity,
                            name text null,
                            constraint playlists_pkey primary key (id)
                        ) tablespace pg_default;

                        create table
                        public.users (
                            id bigint generated by default as identity,
                            created_at timestamp with time zone not null default now(),
                            password text not null default 'password'::text,
                            platform_id bigint not null default '1'::bigint,
                            salt text not null default ''::text,
                            constraint users_pkey primary key (id),
                            constraint users_platform_id_fkey foreign key (platform_id) references platforms (id)
                        ) tablespace pg_default;

                        create table
                        public.links (
                            id bigint generated by default as identity,
                            created_at timestamp with time zone not null default now(),
                            song_id bigint not null,
                            platform_id bigint not null,
                            song_url text not null,
                            constraint links_pkey primary key (id),
                            constraint links_platform_id_fkey foreign key (platform_id) references platforms (id),
                            constraint links_song_id_fkey foreign key (song_id) references songs (id) on delete cascade
                        ) tablespace pg_default;

                        create table
                        public.playlist_songs (
                            playlist_id bigint not null,
                            song_id bigint not null,
                            id bigint generated by default as identity,
                            constraint playlist_songs_pkey primary key (id),
                            constraint playlist_songs_playlist_id_fkey foreign key (playlist_id) references playlists (id),
                            constraint playlist_songs_song_id_fkey foreign key (song_id) references songs (id) on delete cascade
                        ) tablespace pg_default;
                        
                        create table
                        public.ad_campaigns (
                            id bigint generated by default as identity,
                            created_at timestamp with time zone not null default now(),
                            link text not null,
                            target_mood text not null,
                            constraint ad_campaign_pkey primary key (id)
                        ) tablespace pg_default;

                        create table
                        public.song_history (
                            id bigint generated by default as identity,
                            created_at timestamp with time zone not null default now(),
                            user_id bigint not null,
                            song_id bigint not null,
                            constraint song_history_pkey primary key (id),
                            constraint song_history_song_id_fkey foreign key (song_id) references songs (id) on update cascade on delete cascade,
                            constraint song_history_user_id_fkey foreign key (user_id) references users (id) on update cascade on delete cascade
                        ) tablespace pg_default;
                        

                        create table
                        public.users_playlist_position (
                            id bigint generated by default as identity,
                            user_id bigint not null,
                            playlist_song_position bigint null,
                            playlist_id bigint null,
                            constraint users_playlist_position_pkey primary key (id),
                            constraint users_playlist_position_playlist_id_fkey foreign key (playlist_id) references playlists (id),
                            constraint users_playlist_position_playlist_song_position_fkey foreign key (playlist_song_position) references playlist_songs (id) on update restrict on delete set null,
                            constraint users_playlist_position_user_id_fkey foreign key (user_id) references users (id) on delete cascade
                        ) tablespace pg_default;"""))

next_id = 1
    # iterate through files
for file in files:
    # open and load json file
    with open(os.path.join(data_path, file)) as json_file:
        data = json.load(json_file)
        with engine.begin() as conn:
            if song_cnt > max_songs:
                break
            songs_to_insert = []
            for record in data["playlists"]:
                # iterate through tracks
                
                for track in record["tracks"]:
                    # add track to songs dict
                    if track["track_uri"] not in songs:
                        songs_to_insert.append({
                                            "song_name": track["track_name"],
                                            "artist": track["artist_name"],
                                            "album": track["album_name"]
                                        })
                        songs[track["track_uri"]] = next_id
                        next_id += 1
                        song_cnt += 1
                playlist_cnt += 1
            print("starting send")
            conn.execute(text("""INSERT INTO songs (song_name, artist, album) VALUES (:song_name, :artist, :album) RETURNING id"""),
                                    songs_to_insert)
            print(f"Total Songs: {song_cnt}")
            
    file_cnt += 1

    print("Total songs: " + str(song_cnt))
    print("Total playlists: " + str(playlist_cnt))
    print("Total files: " + str(file_cnt))
        # create engine
        # 
        # # iterate through playlists
        # for playlist in data["playlists"]:
        #     # insert playlist into playlists table
        #     with engine.begin() as connection: